Description: A CloudFormation template for deploying Raster Vision Batch jobs to AWS.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Project Configuration
        Parameters:
          - Project
          - Environment
          - Slug
      -
        Label:
          default: EC2 Instance Configuration
        Parameters:
          - VPC
          - SubnetIds
          - KeyName
          - AMI
          - InstanceTypes
          - MinimumVCPUs
          - DesiredVCPUs
          - MaximumVCPUs
      -
        Label:
          default: Docker Image Configuration
        Parameters:
          - RepositoryName
          - ImageTag
      -
        Label:
          default: Docker Container Configuration
        Parameters:
          - InstanceVCPUs
          - InstanceMemory
    ParameterLabels:
      Project:
        default: Name
      Environment:
        default: Environment
      Slug:
        default: Slug
      AMI:
        default: AMI
      KeyName:
        default: SSH Key Name
      SpotFleetBidPercentage:
        default: Spot Fleet Bid Percentage
      MinimumVCPUs:
        default: Minimum vCPU Count
      DesiredVCPUs:
        default: Desired vCPU Count
      MaximumVCPUs:
        default: Maximum vCPU Count
      InstanceTypes:
        default: Instance Types
      InstanceVCPUs:
        default: vCPU Limit
      InstanceMemory:
        default: Memory Limit
      RepositoryName:
        default: Repository Name
      ImageTag:
        default: Image Tag
      VPC:
        default: VPC
      SubnetIds:
        default: Subnets

Parameters:
  Project:
    Type: String
    Default: Raster Vision CloudFormation
    Description: Name of the project to associate with new resources

  Environment:
    Type: String
    Default: Unknown
    Description: Environment of the project being deployed (e.g. Staging, Development, Production)
    MinLength: 1
    AllowedPattern: ^[a-zA-Z0-9]*$
    ConstraintDescription: must only contain uppercase and lowercase letters and numbers

  Slug:
    Type: String
    Default: ""
    Description: >
      Optional identifier to use for namespacing your resources (e.g.
      RasterVisionIamRole becomes yournameRasterVisionIamRole)
    MaxLength: 12
    AllowedPattern: ^[a-z0-9]*$
    ConstraintDescription: must only contain lowercase letters and numbers

  AMI:
    Type: AWS::EC2::Image::Id
    Default: ami-06681f03ed7f21643
    Description: Amazon Machine Image to use for the compute environment

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: An Amazon EC2 key pair name to use for SSH access to the cluster

  SpotFleetBidPercentage:
    Type: Number
    Default: 40
    Description: >
      Minimum percentage that a Spot Instance price must be when compared with
      the On-Demand price for that instance type before instances are launched

  MinimumVCPUs:
    Type: Number
    Default: 0
    Description: The minimum number of EC2 vCPUs that an environment should maintain

  DesiredVCPUs:
    Type: Number
    Default: 0
    Description: The desired number of EC2 vCPUS in the compute environment

  MaximumVCPUs:
    Type: Number
    Default: 80
    Description: The maximum number of EC2 vCPUs that an environment can reach

  InstanceTypes:
    Type: List<String>
    Default: p2.xlarge
    Description: A comma-separated list of instance types that may be launched

  InstanceVCPUs:
    Type: Number
    Default: 8
    Description: Number of vCPUs reserved for the container by the task definition

  InstanceMemory:
    Type: Number
    Default: 55000
    Description: The hard limit (in MB) of memory to present to the container

  RepositoryName:
    Type: String
    Default: ""
    Description: >
      (Optional) Specifies the name of an ECR repository to create for use in
      pushing and pulling images -- if empty, pulls the latest Raster Vision
      GPU image from Quay.io instead

  ImageTag:
    Type: String
    Default: ""
    Description: >
      (Optional) Tag of the container image to retrieve from ECR -- required
      if RepositoryName is not empty

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Virtual Private Cloud in which to launch Batch instances

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      A list of IDs of subnets in which to launch Batch instances (all subnets
      must exist in the VPC you selected)

Conditions:
  UseHostedDockerImage: !Equals [!Ref RepositoryName, ""]
  UseCustomDockerImage: !Not [!Equals [!Ref RepositoryName, ""]]

Resources:
  BatchServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'BatchRole']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - batch.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  SpotFleetIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'SpotFleetRole']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - spotfleet.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  BatchInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'InstanceRole']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BatchInstanceIAMRole
      InstanceProfileName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'InstanceProfile']]

  ContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'SecurityGroup']]
      GroupDescription: !Join ['', ['Security group for ', !Ref Project, ' (', !Ref Environment, ',', !Ref Slug, ')']]
      SecurityGroupIngress:
        -
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        -
          FromPort: 6006
          ToPort: 6006
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        -
          FromPort: 0
          ToPort: 0
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: Name
          Value: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'SecurityGroup']]
        -
          Key: Project
          Value: !Ref Project
        -
          Key: Environment
          Value: !Ref Environment

  Repository:
    Type: AWS::ECR::Repository
    Condition: UseCustomDockerImage
    Properties:
      RepositoryName: !Ref RepositoryName

  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'ComputeEnvironment']]
      Type: Managed
      State: ENABLED
      ServiceRole: !Ref BatchServiceIAMRole
      ComputeResources:
        Type: SPOT
        BidPercentage: !Ref SpotFleetBidPercentage
        Ec2KeyPair: !Ref KeyName
        ImageId: !Ref AMI
        MinvCpus: !Ref MinimumVCPUs
        DesiredvCpus: !Ref DesiredVCPUs
        MaxvCpus: !Ref MaximumVCPUs
        SpotIamFleetRole: !Ref SpotFleetIAMRole
        InstanceRole: !Ref BatchInstanceProfile
        InstanceTypes: !Ref InstanceTypes
        SecurityGroupIds:
          - !Ref ContainerInstanceSecurityGroup
        Subnets: !Ref SubnetIds
        Tags:
          Name: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'ComputeEnvironment']]
          ComputeEnvironment: Raster Vision
          Project: !Ref Project
          Environment: !Ref Environment

  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'JobQueue']]
      Priority: 1
      State: ENABLED
      ComputeEnvironmentOrder:
        -
          ComputeEnvironment: !Ref BatchComputeEnvironment
          Order: 1

  CustomJobDefinition:
    Type: AWS::Batch::JobDefinition
    Condition: UseCustomDockerImage
    Properties:
      Type: Container
      JobDefinitionName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'CustomJobDefinition']]
      ContainerProperties:
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTag}"
        Vcpus: !Ref InstanceVCPUs
        Memory: !Ref InstanceMemory
        Volumes:
          -
            Host:
              SourcePath: /home/ec2-user
            Name: home
        MountPoints:
          -
            ContainerPath: /opt/data
            ReadOnly: false
            SourceVolume: home
        ReadonlyRootFilesystem: false
        Privileged: true

  HostedJobDefinition:
    Type: AWS::Batch::JobDefinition
    Condition: UseHostedDockerImage
    Properties:
      Type: Container
      JobDefinitionName: !Join ['', [!Ref Slug, 'RasterVision', !Ref Environment, 'HostedJobDefinition']]
      ContainerProperties:
        Image: quay.io/azavea/raster-vision:gpu-latest
        Vcpus: !Ref InstanceVCPUs
        Memory: !Ref InstanceMemory
        Volumes:
          -
            Host:
              SourcePath: /home/ec2-user
            Name: home
        MountPoints:
          -
            ContainerPath: /opt/data
            ReadOnly: false
            SourceVolume: home
        ReadonlyRootFilesystem: false
        Privileged: true
